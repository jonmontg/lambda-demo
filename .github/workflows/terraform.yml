name: 'Terraform'

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]

    defaults:
      run:
        shell: bash

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Zip Lambda code
        run: |
          cd lambda_function
          zip -r ../lambda_function.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=terraform-state-bucket-937" \
            -backend-config="key=demo_lambda_function/${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=terraform-locks" \
            -backend-config="encrypt=true"

      - name: Select or create workspace
        run: terraform workspace select -or-create ${{ matrix.environment }} || terraform workspace new ${{ matrix.environment }}

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -input=false

      - name: Terraform Apply
        if: |
          (github.ref == 'refs/heads/main' && matrix.environment == 'prod') ||
          (github.ref == 'refs/heads/dev' && matrix.environment == 'dev')
        run: terraform apply -auto-approve -input=false
